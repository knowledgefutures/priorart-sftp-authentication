---
"AWSTemplateFormatVersion": "2010-09-09"
"Description": "A basic template for creating a Lambda-backed API Gateway for use as a custom idenity provider in AWS Transfer for SFTP. By default, it authenticates a single user in a single server using a hardcoded SSH key or password. You can update the Lambda function code to do something different after deployment."
"Parameters":
  "authenticationServer":
    "Type": "String"
    "Description": "Full URL of the endpoint that should be sent a POST to perform authentication."
    "Default": "https://www.priorartarchive.org/api/sftp-authentication"
"Outputs":
  "StackArn":
    "Value":
      "Ref": "AWS::StackId"
  "TransferIdentityProviderInvocationRole":
    "Description": "IAM Role to pass to the `aws transfer create-server` call as part of optional IdentityProviderDetails"
    "Value":
      "Fn::GetAtt": "TransferIdentityProviderRole.Arn"
  "TransferIdentityProviderUrl":
    "Description": "URL to pass to the `aws transfer create-server` call as part of optional IdentityProviderDetails"
    "Value":
      "Fn::Join":
      - ""
      - - "https://"
        - "Ref": "CustomIdentityProviderApi"
        - ".execute-api."
        - "Ref": "AWS::Region"
        - ".amazonaws.com/"
        - "Ref": "ApiStage"
"Resources":
  "ApiCloudWatchLogsRole":
    "Description": "IAM role used by API Gateway to log API requests to CloudWatch"
    "Properties":
      "AssumeRolePolicyDocument":
        "Statement":
        - "Action":
          - "sts:AssumeRole"
          "Effect": "Allow"
          "Principal":
            "Service":
            - "apigateway.amazonaws.com"
        "Version": "2012-10-17"
      "Policies":
      - "PolicyDocument":
          "Statement":
          - "Action":
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:DescribeLogGroups"
            - "logs:DescribeLogStreams"
            - "logs:PutLogEvents"
            - "logs:GetLogEvents"
            - "logs:FilterLogEvents"
            "Effect": "Allow"
            "Resource": "*"
          "Version": "2012-10-17"
        "PolicyName": "ApiGatewayLogsPolicy"
    "Type": "AWS::IAM::Role"
  "ApiDeployment":
    "DependsOn":
    - "GetUserConfigRequest"
    "Properties":
      "RestApiId":
        "Ref": "CustomIdentityProviderApi"
      "StageName": "dummystagefordeployment"
    "Type": "AWS::ApiGateway::Deployment"
  "ApiLoggingAccount":
    "DependsOn": "CustomIdentityProviderApi"
    "Properties":
      "CloudWatchRoleArn":
        "Fn::GetAtt": "ApiCloudWatchLogsRole.Arn"
    "Type": "AWS::ApiGateway::Account"
  "ApiStage":
    "Properties":
      "DeploymentId":
        "Ref": "ApiDeployment"
      "MethodSettings":
      - "DataTraceEnabled": !!bool "true"
        "HttpMethod": "*"
        "LoggingLevel": "INFO"
        "ResourcePath": "/*"
      "RestApiId":
        "Ref": "CustomIdentityProviderApi"
      "StageName": "prod"
    "Type": "AWS::ApiGateway::Stage"
  "CustomIdentityProviderApi":
    "Properties":
      "Description": "API used for GetUserConfig requests"
      "FailOnWarnings": !!bool "true"
      "Name": "Transfer Custom Identity Provider basic API"
    "Type": "AWS::ApiGateway::RestApi"
  "GetUserConfigLambda":
    "Properties":
      "Code":
        "ZipFile":
          "Fn::Sub": "'use strict';\n\n// GetUserConfig Lambda\n\nexports.handler = (event, context, callback) => {\n  console.log(\"Event:\", JSON.stringify(event));\n\n  var response;\n  if (event.serverId == '${TransferServerId}' && event.username == '${TransferUserName}') {\n    response = {\n      Role: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${TransferUserRoleName}',\n      Policy: '{ \"Version\": \"2012-10-17\", \"Statement\": [{ \"Effect\": \"Allow\", \"Action\": \"s3:*\", \"Resource\": \"*\" }]}', // Not required\n      HomeDirectory: '${TransferUserHomeDirectory}' // Not required, defaults to '/'\n    };\n\n    if (event.password == \"\") {\n      response['PublicKeys'] = [ \"${TransferUserPublicKey1}\" ]; // If no password provided, return the user's SSH public key\n    } else if (event.password !== '${TransferUserPassword}') { // Reject any password that doesn't match '${TransferUserPassword}' \n      response = {};\n    }\n  } else {\n    response = {};\n  }\n  callback(null, response);\n};\n"
      "Description": "A function to provide IAM roles and policies for given user and serverId."
      "Handler": "index.handler"
      "Role":
        "Fn::GetAtt": "LambdaExecutionRole.Arn"
      "Runtime": "nodejs8.10"
    "Type": "AWS::Lambda::Function"
  "GetUserConfigLambdaPermission":
    "Properties":
      "Action": "lambda:invokeFunction"
      "FunctionName":
        "Fn::GetAtt": "GetUserConfigLambda.Arn"
      "Principal": "apigateway.amazonaws.com"
      "SourceArn":
        "Fn::Join":
        - ""
        - - "arn:aws:execute-api:"
          - "Ref": "AWS::Region"
          - ":"
          - "Ref": "AWS::AccountId"
          - ":"
          - "Ref": "CustomIdentityProviderApi"
          - "/*"
    "Type": "AWS::Lambda::Permission"
  "GetUserConfigRequest":
    "DependsOn": "GetUserConfigLambdaPermission"
    "Properties":
      "AuthorizationType": "AWS_IAM"
      "HttpMethod": "GET"
      "Integration":
        "IntegrationHttpMethod": "POST"
        "IntegrationResponses":
        - "StatusCode": !!int "200"
        "RequestTemplates":
          "application/json": "{\n  \"username\": \"$input.params('username')\",\n  \"password\": \"$input.params('Password')\",\n  \"serverId\": \"$input.params('serverId')\"\n}\n"
        "Type": "AWS"
        "Uri":
          "Fn::Join":
          - ""
          - - "arn:aws:apigateway:"
            - "Ref": "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - "Fn::GetAtt":
              - "GetUserConfigLambda"
              - "Arn"
            - "/invocations"
      "MethodResponses":
      - "ResponseModels":
          "application/json": "UserConfigResponseModel"
        "StatusCode": !!int "200"
      "RequestParameters":
        "method.request.header.Password": !!bool "false"
      "ResourceId":
        "Ref": "GetUserConfigResource"
      "RestApiId":
        "Ref": "CustomIdentityProviderApi"
    "Type": "AWS::ApiGateway::Method"
  "GetUserConfigResource":
    "Properties":
      "ParentId":
        "Ref": "UserNameResource"
      "PathPart": "config"
      "RestApiId":
        "Ref": "CustomIdentityProviderApi"
    "Type": "AWS::ApiGateway::Resource"
  "GetUserConfigResponseModel":
    "Properties":
      "ContentType": "application/json"
      "Description": "API reponse for GetUserConfig"
      "Name": "UserConfigResponseModel"
      "RestApiId":
        "Ref": "CustomIdentityProviderApi"
      "Schema":
        "$schema": "http://json-schema.org/draft-04/schema#"
        "properties":
          "HomeDirectory":
            "type": "string"
          "Policy":
            "type": "string"
          "PublicKeys":
            "items":
              "type": "string"
            "type": "array"
          "Role":
            "type": "string"
        "title": "UserUserConfig"
        "type": "object"
    "Type": "AWS::ApiGateway::Model"
  "LambdaExecutionRole":
    "Properties":
      "AssumeRolePolicyDocument":
        "Statement":
        - "Action":
          - "sts:AssumeRole"
          "Effect": "Allow"
          "Principal":
            "Service":
            - "lambda.amazonaws.com"
        "Version": "2012-10-17"
      "ManagedPolicyArns":
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    "Type": "AWS::IAM::Role"
  "ServerIdResource":
    "Properties":
      "ParentId":
        "Ref": "ServersResource"
      "PathPart": "{serverId}"
      "RestApiId":
        "Ref": "CustomIdentityProviderApi"
    "Type": "AWS::ApiGateway::Resource"
  "ServersResource":
    "Properties":
      "ParentId":
        "Fn::GetAtt":
        - "CustomIdentityProviderApi"
        - "RootResourceId"
      "PathPart": "servers"
      "RestApiId":
        "Ref": "CustomIdentityProviderApi"
    "Type": "AWS::ApiGateway::Resource"
  "TransferIdentityProviderRole":
    "Properties":
      "AssumeRolePolicyDocument":
        "Statement":
        - "Action":
          - "sts:AssumeRole"
          "Effect": "Allow"
          "Principal":
            "Service": "transfer.amazonaws.com"
        "Version": "2012-10-17"
      "Policies":
      - "PolicyDocument":
          "Statement":
          - "Action":
            - "execute-api:Invoke"
            "Effect": "Allow"
            "Resource":
              "Fn::Sub": "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${CustomIdentityProviderApi}/prod/GET/*"
          "Version": "2012-10-17"
        "PolicyName": "TransferCanInvokeThisApi"
      - "PolicyDocument":
          "Statement":
          - "Action":
            - "apigateway:GET"
            "Effect": "Allow"
            "Resource": "*"
          "Version": "2012-10-17"
        "PolicyName": "TransferCanReadThisApi"
    "Type": "AWS::IAM::Role"
  "UserNameResource":
    "Properties":
      "ParentId":
        "Ref": "UsersResource"
      "PathPart": "{username}"
      "RestApiId":
        "Ref": "CustomIdentityProviderApi"
    "Type": "AWS::ApiGateway::Resource"
  "UsersResource":
    "Properties":
      "ParentId":
        "Ref": "ServerIdResource"
      "PathPart": "users"
      "RestApiId":
        "Ref": "CustomIdentityProviderApi"
    "Type": "AWS::ApiGateway::Resource"
